
global:
  imageRegistry: ""
  imagePullSecrets: []
  security:
    allowInsecureImages: false
  compatibility:
    openshift:
      adaptSecurityContext: auto

nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""
kubeVersion: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  repository: bitnami/nginx
  tag: 1.28.0-debian-12-r0
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false
enableDefaultInitContainers: true
automountServiceAccountToken: false
hostAliases: []
command: []
args: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

replicaCount: 1
revisionHistoryLimit: 10
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}
podLabels: {}
podAnnotations: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
hostNetwork: false
hostIPC: false
dnsPolicy: ""
dnsConfig: {}
nodeSelector: {}
tolerations: []
priorityClassName: ""
schedulerName: ""
terminationGracePeriodSeconds: ""
topologySpreadConstraints: []
tls:
  enabled: true
  autoGenerated: true
  existingSecret: ""
  certFilename: tls.crt
  certKeyFilename: tls.key
  certCAFilename: ca.crt
  cert: ""
  key: ""
  ca: ""
podSecurityContext:
  enabled: true
  fsGroupChangePolicy: Always
  supplementalGroups: []
  fsGroup: 1001
  sysctls: []
containerSecurityContext:
  enabled: true
  seLinuxOptions: {}
  runAsUser: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  privileged: false
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop: ["ALL"]
  seccompProfile:
    type: "RuntimeDefault"
containerPorts:
  http: 8080
  https: 8443
extraContainerPorts: []
resourcesPreset: "nano"
resources: {}
lifecycleHooks: {}

startupProbe:
  enabled: false
  initialDelaySeconds: 30
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 6
  successThreshold: 1
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 5
  timeoutSeconds: 3
  periodSeconds: 5
  failureThreshold: 3
  successThreshold: 1
customStartupProbe: {}
customLivenessProbe: {}
customReadinessProbe: {}
autoscaling:
  enabled: false
  minReplicas: ""
  maxReplicas: ""
  targetCPU: ""
  targetMemory: ""
extraVolumes: []
extraVolumeMounts: []
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: false
sidecars: []
sidecarSingleProcessNamespace: false
initContainers: []
pdb:
  create: true
  minAvailable: ""
  maxUnavailable: ""

cloneStaticSiteFromGit:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/git
    tag: 2.49.0-debian-12-r6
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  repository: ""
  branch: ""
  interval: 60
  gitClone:
    command: []
    args: []
  gitSync:
    command: []
    args: []
    resourcesPreset: "nano"
    resources: {}
  extraEnvVars: []
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
serverBlock: ""
streamServerBlock: ""
existingServerBlockConfigmap: ""
existingStreamServerBlockConfigmap: ""
staticSiteConfigmap: ""
staticSitePVC: ""

service:
  type: LoadBalancer
  ports:
    http: 80
    https: 443
  nodePorts:
    http: ""
    https: ""
  targetPort:
    http: http
    https: https
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  loadBalancerClass: ""
  extraPorts: []
  sessionAffinity: None
  sessionAffinityConfig: {}
  annotations: {}
  externalTrafficPolicy: Cluster
networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  extraIngress: []
  extraEgress: []
  ingressNSMatchLabels: {}
  ingressNSPodMatchLabels: {}
ingress:
  enabled: false
  selfSigned: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: nginx.local
  path: /
  annotations: {}
  ingressClassName: ""
  tls: false
  tlsWwwPrefix: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []
healthIngress:
  enabled: false
  selfSigned: false
  pathType: ImplementationSpecific
  hostname: example.local
  path: /
  annotations: {}
  tls: false
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  ingressClassName: ""
  extraRules: []

metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/nginx-exporter
    tag: 1.4.2-debian-12-r1
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  port: ""
  extraArgs: []
  containerPorts:
    metrics: 9113
  podAnnotations: {}
  securityContext:
    enabled: false
    seLinuxOptions: {}
    runAsUser: 1001
  service:
    port: 9113
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
  resourcesPreset: "nano"
  resources: {}
  serviceMonitor:
    enabled: false
    namespace: ""
    jobLabel: ""
    interval: ""
    scrapeTimeout: ""
    selector: {}
    labels: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels: {}
    rules: []
